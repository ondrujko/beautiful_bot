from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import datetime
from aiogram import types
from schedule import dates

months = {
    1: '–Ø–Ω–≤–∞—Ä—å',
    2: '–§–µ–≤—Ä–∞–ª—å',
    3: '–ú–∞—Ä—Ç',
    4: '–ê–ø—Ä–µ–ª—å',
    5: '–ú–∞–π',
    6: '–ò—é–Ω—å',
    7: '–ò—é–ª—å',
    8: '–ê–≤–≥—É—Å—Ç',
    9: '–°–µ–Ω—Ç—è–±—Ä—å',
    10: '–û–∫—Ç—è–±—Ä—å',
    11: '–ù–æ—è–±—Ä—å',
    12: '–î–µ–∫–∞–±—Ä—å'
}


async def schedule_markup(next_month: bool = False):
    now = datetime.datetime.now()
    month = now.month + next_month
    if month <= 12:
        year = now.year
    else:
        month = month % 12
        year = now.year + 1
    lst = await dates.get_free_dates(month, year)
    buttons = []
    keyboard = types.InlineKeyboardMarkup(row_width=6)
    for date in lst:
        callback = f'{date[0]}:{date[1]}:{date[2]}'
        button = types.InlineKeyboardButton(text=str(date[0]), callback_data=callback)
        buttons.append(button)
    keyboard.add(*buttons)

    if next_month:
        keyboard.add(types.InlineKeyboardButton(f'<< {months[month - 1]}', callback_data=f'month:{month - 1}'))
    else:
        keyboard.add(types.InlineKeyboardButton(f'>> {months[month + 1]}', callback_data=f'month:{month + 1}'))

    return keyboard


async def time_markup(date: str):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    free_times = await dates.get_free_times(date)
    if 'morning' in free_times:
        keyboard.add(types.InlineKeyboardButton(text='9:00 - 11:30', callback_data=date + ':morning'))
    if 'day' in free_times:
        keyboard.add(types.InlineKeyboardButton(text='12:00 - 14:30', callback_data=date + ':day'))
    if 'afternoon' in free_times:
        keyboard.add(types.InlineKeyboardButton(text='15:00 - 17:30', callback_data=date + ':afternoon'))
    keyboard.add(types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å', callback_data='back to calendar'))
    return keyboard


async def main_menu_markup():
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úçÔ∏è', '–ú–æ–∏ –∑–∞–ø–∏—Å–∏üìÜ', '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æüíÖüèª', '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ü¶æ']
    keyboard.add(*buttons)
    return keyboard


async def portfolio_markup():
    keyboard = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    buttons = ['–ì–µ–æ–º–µ—Ç—Ä–∏—èüî∏', '–ú–∞—Ç–æ–≤—ã–πü§ç', '–í—Ç–∏—Ä–∫–∞üî•', '–ú—Ä–∞–º–æ—Ä‚óΩÔ∏è', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–πüå∏', '–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑üê±', '–ë–ª–µ—Å—Ç–æ—á–∫–∏ ‚ú®',
               '–ö—Ä—É–∂–µ–≤–æüí´', '–ì—Ä–∞–¥–∏–µ–Ω—Çüåà', '–ü–∞—É—Ç–∏–Ω–∫–∞üï∏']
    keyboard.add(*buttons)
    keyboard.add('–ù–∞–∑–∞–¥üîô')
    return keyboard


async def confirm_booking_markup():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='decline_booking'),
                 types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_booking'))
    return keyboard


async def my_booking_markup(booking_founded: bool = False):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if booking_founded:
        keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—åüôÖ')
    else:
        keyboard.add('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úçÔ∏è')
    keyboard.add('–ù–∞–∑–∞–¥üîô')
    return keyboard


async def share_contact_markup():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    send_contact_button = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True)
    cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå')
    keyboard.add(send_contact_button, cancel_button)
    return keyboard


async def cancel_markup():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞‚ùå')
