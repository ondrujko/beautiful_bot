from aiogram import types, Dispatcher
from create_bot import bot, db
import keyboards
import materials
from aiogram.dispatcher.filters.state import State, StatesGroup
import datetime


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class FSMclient(StatesGroup):
    date = State()
    time = State()
    fio = State()
    contact = State()
    confirm = State()


# –ö–æ–º–∞–Ω–¥–∞ start –∏–ª–∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def command_start(message: types.Message):
    if message.text in ['/start', '/menu']:
        await message.answer(materials.welcome_message, reply_markup=await keyboards.client_keyboard.main_menu_markup())
        await db.add_new_user(message.chat.id)

    elif message.text == '/help':
        await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ @ondrujko')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
async def new_booking(message: types.Message):
    booking_info = await db.search_booking(message.chat.id)
    if booking_info is False:
        await FSMclient.date.set()
        t1 = datetime.datetime.now()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n'
                             f'–î–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü: {materials.months[datetime.datetime.now().month]}',
                             reply_markup=await keyboards.client_keyboard.schedule_markup())
        await message.answer('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel',
                             reply_markup=await keyboards.client_keyboard.cancel_markup())
        print('TIME:',datetime.datetime.now() - t1)
    else:
        await message.answer(
            f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é.\n\n'
            f'{await materials.make_message_from_booking_info(booking_info=booking_info, with_master_info=True)}',
            reply_markup=await keyboards.client_keyboard.my_booking_markup(booking_founded=True))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ú–æ–∏ –∑–∞–ø–∏—Å–∏
async def my_booking(message: types.Message):
    booking_info = await db.search_booking(message.chat.id)  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
    if booking_info is not False:

        await message.answer(f'–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.\n\n'
                             f'{await materials.make_message_from_booking_info(booking_info, with_master_info=True)}',
                             reply_markup=await keyboards.client_keyboard.my_booking_markup(True))

    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π!\n'
                             f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úçÔ∏è ',
                             reply_markup=await keyboards.client_keyboard.my_booking_markup(False))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
async def portfolio(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                         reply_markup=await keyboards.client_keyboard.portfolio_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞
async def buy_bot(message: types.Message):
    await message.answer('–ó–∞–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É üëâ@ondrujko')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
async def portfolio_menu(message: types.Message):
    if message.text in materials.portfolio.keys():
        media = types.MediaGroup()
        for photo in materials.portfolio[message.text]:
            media.attach_photo(photo)
        await bot.send_media_group(message.chat.id, media=media)


# –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å
async def delete_booking(message: types.Message):
    await db.delete_booking(message.chat.id)
    await message.answer('–ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–∞.', reply_markup=await keyboards.client_keyboard.main_menu_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è /menu
async def menu(message: types.Message):
    await message.answer(materials.back_to_main_menu_message,
                         reply_markup=await keyboards.client_keyboard.main_menu_markup())


# FSM –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∂–∞—Ç—å –Ω–∞ inline –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã
async def get_date(call: types.CallbackQuery, state: FSMclient):
    now = datetime.datetime.now()
    if call.data.startswith('month:'):
        if int(call.data.split(':')[1]) != now.month:
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n'
                                         f'–î–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü: {materials.months[now.month + 1]}',

                                         reply_markup=await keyboards.client_keyboard.schedule_markup(True))
        else:
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n'
                                         f'–î–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü: {materials.months[now.month]}',

                                         reply_markup=await keyboards.client_keyboard.schedule_markup())
    else:
        async with state.proxy() as data:
            data['date'] = call.data
        await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è',
                                    call.message.chat.id, call.message.message_id,
                                    reply_markup=await keyboards.client_keyboard.time_markup(call.data))
        await FSMclient.next()
    print('TIME NEXT MONTH:', datetime.datetime.now() - now)


# FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã
async def get_time(call: types.CallbackQuery, state: FSMclient):
    now = datetime.datetime.now()
    if call.data == 'back to calendar':
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n'
                                     f'–î–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü: {materials.months[now.month]}',
                                     reply_markup=await keyboards.client_keyboard.schedule_markup())
        await FSMclient.date.set()

    else:
        async with state.proxy() as data:
            data['time'] = call.data.split(':')[-1]
            date = tuple(map(int, str(data['date']).split(':')))
            day, month, year = date[0], date[1], date[2]
            if month < 10:
                month = '0' + str(month)
            if day < 10:
                day = '0' + str(day)
            await call.message.edit_text(f'–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏ –Ω–∞ {day}.{month}.{year}\n'
                                         f'{materials.dict_time[data["time"]]}')
            await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û')
        await FSMclient.next()


# FSM –∑–∞–ø—Ä–æ—Å–∏—Ç—å –§–ò–û
async def get_fio(message: types.Message, state: FSMclient):
    async with state.proxy() as data:
        data['fio'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                         reply_markup=await keyboards.client_keyboard.share_contact_markup())
    await FSMclient.next()


# FSM –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é)
async def get_contact_text(message: types.Message, state: FSMclient):
    cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå')
    cancel_keyboard.add(cancel_button)
    if message.content_type == 'text':
        async with state.proxy() as data:
            data['contact'] = message.text
    else:
        async with state.proxy() as data:
            data['contact'] = message.contact.phone_number

    async with state.proxy() as data:
        date = tuple(map(int, str(data['date']).split(':')))
        day, month, year = date[0], date[1], date[2]
        time = str(data['time']).split(':')[-1]
        contact = data['contact']
        fio = data['fio']
        d_time = {'morning': '9:00 - 11:30',
                  'day': '12:00 - 14:30',
                  'afternoon': '15:00 - 17:30'}
    if month < 10:
        month = '0' + str(month)
    await message.answer(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∏, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å —Å '
        f'–Ω–∞—á–∞–ª–∞.\n\n'
        f'–î–∞—Ç–∞: {day}.{month}.{year}\n'
        f'–í—Ä–µ–º—è: {d_time[time]}\n'
        f'–í–∞—à–µ –§–ò–û: {fio}\n'
        f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact}\n\n'
        f'–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
        reply_markup=await keyboards.client_keyboard.confirm_booking_markup())

    msg = await message.answer('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —ç—Ç—É –∑–∞–ø–∏—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                               '–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.', reply_markup=cancel_keyboard)
    async with state.proxy() as data:
        data['message_for_delete'] = msg
    await FSMclient.next()


# FSM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
async def confirm_booking(call: types.CallbackQuery, state: FSMclient):
    if call.data == 'confirm_booking':
        async with state.proxy() as data:
            date = tuple(map(int, str(data['date']).split(':')))
            day, month, year = date[0], date[1], date[2]
            time = str(data['time']).split(':')[-1]
            chat_id = call.message.chat.id
            status = True
            contact = data['contact']
            fio = data['fio']
            await db.add_new_order(day, month, year, time, chat_id, status, contact, fio)
            await call.message.edit_text(materials.final_booking_message)
    elif call.data == 'decline_booking':
        await call.message.edit_text('–ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await call.message.answer(materials.back_to_main_menu_message,
                              reply_markup=await keyboards.client_keyboard.main_menu_markup())
    async with state.proxy() as data:
        msg = data['message_for_delete']
        await bot.delete_message(msg.chat.id, msg.message_id)
    await state.finish()


# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø–∏—Å–∏
async def fsm_stop(message: types.Message, state: FSMclient):
    await message.answer(materials.cancel_booking_procedure_message,
                         reply_markup=await keyboards.client_keyboard.main_menu_markup())
    async with state.proxy() as data:
        try:
            msg = data['message_for_delete']
            bot.delete_message(msg.message.id, msg.message.message_id)
        except:
            pass
    await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help', 'menu'], state=None)
    dp.register_message_handler(fsm_stop, lambda message: message.text in ['–û—Ç–º–µ–Ω–∞‚ùå', '/cancel', '/start', 'help', '/menu'], state='*')
    dp.register_callback_query_handler(get_date, state=FSMclient.date)
    dp.register_callback_query_handler(get_time, state=FSMclient.time)
    dp.register_callback_query_handler(confirm_booking, state=FSMclient.confirm)
    dp.register_message_handler(get_fio, content_types='text', state=FSMclient.fio)
    dp.register_message_handler(get_contact_text, content_types=['text', 'contact'], state=FSMclient.contact)
    dp.register_message_handler(command_start, commands=['start', 'help'], state=None)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.register_message_handler(new_booking, lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úçÔ∏è')
    dp.register_message_handler(my_booking, lambda message: message.text == '–ú–æ–∏ –∑–∞–ø–∏—Å–∏üìÜ')
    dp.register_message_handler(portfolio, lambda message: message.text == '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æüíÖüèª')
    dp.register_message_handler(buy_bot, lambda message: message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ü¶æ')

    dp.register_message_handler(delete_booking, lambda message: message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—åüôÖ')
    dp.register_message_handler(menu, lambda message: message.text in ['–ù–∞–∑–∞–¥üîô', '/menu'])
    dp.register_message_handler(portfolio_menu, content_types='text')
